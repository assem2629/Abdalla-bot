import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

TOKEN = os.getenv("TOKEN")

def first_memo(update: Update, context: CallbackContext):
    update.message.reply_text("ðŸ“˜ Ù…Ø°ÙƒØ±Ø© Ø£ÙˆÙ„Ù‰ Ø«Ø§Ù†ÙˆÙŠ:\n[Ø¶Ø¹ Ø§Ù„Ø±Ø§Ø¨Ø· Ù‡Ù†Ø§]")

def first_explain(update: Update, context: CallbackContext):
    update.message.reply_text("ðŸŽ§ Ø´Ø±Ø­ Ø£ÙˆÙ„Ù‰ Ø«Ø§Ù†ÙˆÙŠ:\n[Ø¶Ø¹ Ø§Ù„Ø±Ø§Ø¨Ø· Ù‡Ù†Ø§]")

def second_memo(update: Update, context: CallbackContext):
    update.message.reply_text("ðŸ“˜ Ù…Ø°ÙƒØ±Ø© ØªØ§Ù†ÙŠØ© Ø«Ø§Ù†ÙˆÙŠ:\n[Ø¶Ø¹ Ø§Ù„Ø±Ø§Ø¨Ø· Ù‡Ù†Ø§]")

def second_explain(update: Update, context: CallbackContext):
    update.message.reply_text("ðŸŽ§ Ø´Ø±Ø­ ØªØ§Ù†ÙŠØ© Ø«Ø§Ù†ÙˆÙŠ:\n[Ø¶Ø¹ Ø§Ù„Ø±Ø§Ø¨Ø· Ù‡Ù†Ø§]")

def third_memo(update: Update, context: CallbackContext):
    update.message.reply_text("ðŸ“˜ Ù…Ø°ÙƒØ±Ø© ØªØ§Ù„ØªØ© Ø«Ø§Ù†ÙˆÙŠ:\n[Ø¶Ø¹ Ø§Ù„Ø±Ø§Ø¨Ø· Ù‡Ù†Ø§]")

def third_explain(update: Update, context: CallbackContext):
    update.message.reply_text("ðŸŽ§ Ø´Ø±Ø­ ØªØ§Ù„ØªØ© Ø«Ø§Ù†ÙˆÙŠ:\n[Ø¶Ø¹ Ø§Ù„Ø±Ø§Ø¨Ø· Ù‡Ù†Ø§]")

def menu(update: Update, context: CallbackContext):
    keyboard = [["Ø£ÙˆÙ„Ù‰ Ø«Ø§Ù†ÙˆÙŠ", "ØªØ§Ù†ÙŠØ© Ø«Ø§Ù†ÙˆÙŠ", "ØªØ§Ù„ØªØ© Ø«Ø§Ù†ÙˆÙŠ"]]
    update.message.reply_text("Ø§Ø®ØªØ§Ø± Ø§Ù„Ø³Ù†Ø©:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))

def handle_text(update: Update, context: CallbackContext):
    text = update.message.text
    mapping = {
        "Ø£ÙˆÙ„Ù‰ Ø«Ø§Ù†ÙˆÙŠ": (first_memo, first_explain),
        "ØªØ§Ù†ÙŠØ© Ø«Ø§Ù†ÙˆÙŠ": (second_memo, second_explain),
        "ØªØ§Ù„ØªØ© Ø«Ø§Ù†ÙˆÙŠ": (third_memo, third_explain),
    }
    if text in mapping:
        funcs = mapping[text]
        context.user_data["funcs"] = funcs
        keyboard = [["ðŸ“˜ Ù…Ø°ÙƒØ±Ø©", "ðŸŽ§ Ø´Ø±Ø­"]]
        update.message.reply_text(f"Ø§Ø®ØªØ± Ù†ÙˆØ¹ Ø§Ù„Ù…Ø­ØªÙˆÙ‰ Ù„Ù„Ø³Ù†Ø© {text}:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    elif text in ["ðŸ“˜ Ù…Ø°ÙƒØ±Ø©", "ðŸŽ§ Ø´Ø±Ø­"]:
        funcs = context.user_data.get("funcs")
        if funcs:
            funcs[0](update, context) if text=="ðŸ“˜ Ù…Ø°ÙƒØ±Ø©" else funcs[1](update, context)
    else:
        menu(update, context)

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("menu", menu))
    dp.add_handler(CommandHandler("first_memo", first_memo))
    dp.add_handler(CommandHandler("first_explain", first_explain))
    dp.add_handler(CommandHandler("second_memo", second_memo))
    dp.add_handler(CommandHandler("second_explain", second_explain))
    dp.add_handler(CommandHandler("third_memo", third_memo))
    dp.add_handler(CommandHandler("third_explain", third_explain))

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
